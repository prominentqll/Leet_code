**************************************************************************************************
题目描述：
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

解题思路：
- 申请三个二维数组$rawFlag$和$colFlag$以及$cellFlag$
- $rawFalg[][]$用于代表某行中是否出现过数字X：



假设：i = 0;c = 8;那么rawFlag[i][c] = true的含义为：在第0行中，出现过数字8。

假设：i = 8; c = 1;那么rawFlag[i][c] = true的含义为：在第8行中，出现过数字1。


- $colFlag[][]$用于代表某列中是否出现过数字$X$


```
假设：i = 0;c = 8;那么colFlag[i][c] = true的含义为：在第0列中，出现过数字8。

假设：i = 8; c = 1;那么colFlag[i][c] = true的含义为：在第8列中，出现过数字1。
```

- $cellFlag[][]$的含义为某个$3×3$方阵中是否出现过数字$X$，
此外，假设左上角是第一个方阵，右上角是第三个方阵，左下角是第六个方阵，右下角是第九个方阵。



假设：i = 0;c = 8;那么cellFlag[i][c] = true的含义为：在第0个方阵中，出现过数字8。

假设：i = 8; c = 1;那么cellFlag[i][c] = true的含义为：在第8个方阵中，出现过数字1。



- 使用$3 * (i / 3) + j / 3$ ($i$代表行的增加、$j$代表列的增加)就可以根据当前的行列关系计算出当前处于第几个方阵。
************************************************************************************************************************
代码实现：
bool isValidSudoku(vector<vector<char> > &board) {
        if (board.empty() || board[0].empty()) return false;
        int m = board.size(), n = board[0].size();
        vector<vector<bool> > rowFlag(m, vector<bool>(n, false));//表示某行是否出现过该数字
        vector<vector<bool> > colFlag(m, vector<bool>(n, false));//表示某列是否出现过该数字
        vector<vector<bool> > cellFlag(m, vector<bool>(n, false));//表示某个3x3的矩阵中是否出现过该数字
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] >= '1' && board[i][j] <= '9') {
                    int c = board[i][j] - '1';
                    if (rowFlag[i][c] || colFlag[c][j] || cellFlag[3 * (i / 3) + j / 3][c]) 
                    {
                        //rowFlag[i][c]：表示i行是否出现过c
                        //colFlag[c][j]:表示j列是否出现过c
                        //cellFlag[i][c]:表示在第i个方阵中是否出现过数字c,其中该数字属于第几个方阵可通过其行列坐标计算得到
        
                        return false;
                    }
                    rowFlag[i][c] = true;
                    colFlag[c][j] = true;
                    cellFlag[3 * (i / 3) + j / 3][c] = true;
                }
            }
        }
        return true;
    }