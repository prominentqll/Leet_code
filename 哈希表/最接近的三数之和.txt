**************************************************************************************************************
题目描述：
给定一个包括 n 个整数的数组 nums 和 一个目标值 target。
找出 nums 中的三个整数，使得它们的和与 target 最接近。
返回这三个数的和。假定每组输入只存在唯一答案。

例如，给定数组 nums = [-1，2，1，-4], 和 target = 1.

与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).

解题思路：
- 首先进行数组排序，时间复杂度 $O(nlog_2n)$
- 在数组 nums 中，进行遍历，每遍历一个值利用其下标i，形成一个固定值 nums[i]
- 再使用前指针指向 start = i + 1处，后指针指向 end = nums.length - 1 处，也就是结尾处
- 根据sum = nums[i] + nums[start] + nums[end]的结果，判断 sum 与目标 target 的距离，如果更近则更新结果result
- 同时判断 sum  与 target  的大小关系
- 整个遍历过程，固定值为 n 次，双指针为 n 次，时间复杂度为 O(n^2) 
- 总时间复杂度：O(n^2)
****************************************************************************************************************
代码实现：
 int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());//对数组进行排序
        int sum;
        int start;
        int end;
        int result = nums[0]+nums[1]+nums[2];
        for(int i=0;i<nums.size()-2;++i)
        {
            start=i+1;
            end=nums.size()-1;
            while(start<end)
            {
                sum=nums[i]+nums[start]+nums[end];
                if(abs(target-sum)<abs(target-result))
                {
                 //该结果更接近，则更新result为最接近的结果
                    result=sum;
                }
                if(target>sum)
                {
                   start++  ;
                }
                else
                {
                    end--;
                }
                
            }  
        }
        return result;
    }


