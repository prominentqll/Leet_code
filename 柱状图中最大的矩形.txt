**************************************************************************************************************
问题描述：
给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。

求在该柱状图中，能够勾勒出来的矩形的最大面积。

解题思路：
这道题的最优解法是使用单调栈，时间复杂度可以达到O（n）。

单调栈：栈内元素单调递增或单调递减的栈。
单调栈的维护是O（n）级的时间复杂度，因为所有元素只会进入栈一次，并且出栈后再也不会进栈了。

单调栈的性质：
单调栈里的元素具有单调性
元素加入栈前，会在栈顶端把破坏栈单调性的元素都删除。
使用单调递增栈可以找到元素向左遍历第一个比它小的元素；使用单调递减栈可以找到元素想做遍历第一个比它大的元素。
矩形的左边界是这根柱子左边第一个矮于它的柱子，矩形的右边界是这根柱子右边第一个矮于它的柱子
*****************************************************************************************************************

代码实现：
 int largestRectangleArea(vector<int>& heights) {
        if(heights.empty())
            return 0;
        stack<int> st;
        heights.push_back(0);//为了让最后一个柱子也能够得以处理，在数组末端添加一个高度为0的柱子。
        int res=0;
        for(int i=0;i<heights.size();i++){
            while(!st.empty()&&heights[i]<heights[st.top()]){//栈中比当前柱子高的柱子可能不止一个，因此要用while循环
                int curHeight = heights[st.top()];
                st.pop();
                int width = st.empty()? i : i - st.top() - 1;//弹出栈顶元素后栈可能为空，此时矩形的宽度为 i-0=i
                if(width*curHeight>res)
                    res=width*curHeight;
            }
            st.push(i); //单调栈中放的是下标 而不是高度
        }
        return res;
    }