**************************************************************************************************
题目描述：
给定一个由 ‘(’ 和 ‘)’ 括号组成的字符串 S，我们需要添加最少的括号（ ‘(’ 或是 ‘)’，可以在任何位置）
以使得到的括号字符串有效。

从形式上讲，只有满足下面几点之一，括号字符串才是有效的：
它是一个空字符串，或者
它可以被写成 AB （A 与 B 连接）, 其中 A 和 B 都是有效字符串，或者
它可以被写作 (A)，其中 A 是有效字符串。

给定一个括号字符串，返回为使结果字符串有效而必须添加的最少括号数。
示例 1：
输入："())"
输出：1


示例 2：
输入："((("
输出：3

示例 3：

输入："()"
输出：0

示例 4：

输入："()))(("
输出：4

提示：
S.length <= 1000
S 只包含 '(' 和 ')' 字符。


解题思路：
如果遇到左括号，直接放入栈中
否则判断栈是为空，如果栈顶为空，说明当前遇到的右括号没有左括号匹配，即需要添加一个左括号
如果栈不为空，则说明之前的左括号可以和当前的右括号匹配。
*****************************************************************************************************
代码实现：
int minAddToMakeValid(string S)
{
	
	stack<char>  mystack;
	/*
	开始遍历字符串，遇到左括号就进行入栈
	遇到右括号判断栈是否为空，如果为空表示该右括号需要匹配一个左括号
	否则就从栈中取出一个左括号进行匹配
	当字符串扫描完之后，如果栈中还有括号，表示栈中的左括号需要想换一个数量的右括号进行匹配
	此时我们需要的括号数量还需要进行相应的添加。
	*/
	int count = 0;
	for (auto c : S)
	{
		if (c == '(')
		{
			mystack.push(c);
		}
		else if (mystack.empty())
		{
			count++;
		}
		else
		{
			mystack.pop();
		}

	}
	return count + mystack.size();
}




