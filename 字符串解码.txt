*****************************************************************************************************
题目描述：
给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。

你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。

此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

示例:

s = "3[a]2[bc]", 返回 "aaabcbc".
s = "3[a2[c]]", 返回 "accaccacc".
s = "2[abc]3[cd]ef", 返回 "abcabccdcdcdef".

解题思路：
1.使用两个栈(一个数字栈，一个字符串栈)
2.遇到数字字符，就将数字字符转化为数字
3.遇到'['，就将数字和之前保存的栈顶字符串分别push进相应的栈中
4.遇到字母字符，就不断进行累加到cur
4.遇到']',首先将数字栈中的栈顶元素取出，用来作为循环入cur的次数
5.将cur循环处理完之后，要进行更新当前已经处理好的字符串。
***************************************************************************************************
代码实现：
 string decodeString(string s) 
{
	//用两个栈，一个数字栈，一个字符串栈
	stack<int>  numstack;
	stack<string>  strstack;
	string cur = "";//保存每个中括号里的字符串
	int num = 0;
	for (int i = 0; i < s.size(); ++i)
	{
		if (s[i] >= '0'&&s[i] <= '9')
		{
			num = num * 10 + s[i] - '0';
		}
		if (s[i] == '[')//遇到左括号就将数字,字符入栈
		{
			numstack.push(num);
			strstack.push(cur);
			cur.clear();
			num = 0;
		}
		else if (s[i] >= 'a'&&s[i] <= 'z' || s[i] >= 'A'&&s[i] <= 'Z')
		{
			cur += s[i];
		}
		else if (s[i] == ']')
		{
			//取出数字栈中的栈顶元素
			int  k = numstack.top();
			numstack.pop();
			for (int i = 0; i < k; ++i)
			{
				strstack.top() += cur;
			}
			cur = strstack.top();//更新每次的cur
			strstack.pop();
		}	
	}
	return cur;
}
