*******************************************************************************
题目描述：
给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。
请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。
你可以假设 nums1 和 nums2 不会同时为空。

示例1:


nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0

示例 2:


nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5


解题思路：
- 首先将两个有序数组进行合并
- 对合并后的数组找中位数
********************************************************************************
代码实现:
double findMedianSortedArrays(vector<int>& vec1, vector<int>& vec2) 
    {
        int len1 = vec1.size();
        int len2 = vec2.size();
        int len = len1 + len2;
        int i = 0;
        int j = 0;
        int k = 0;
        vector<int> res(len1+len2);
        while (i < len1&&j < len2)
        {
            if (vec1[i] < vec2[j])
            {
                res[k++]=vec1[i++];
            }
            else
            {
                res[k++] = vec2[j++];
            }
        }
        while (i < len1)
        {
            res[k++] = vec1[i++];
        }
        while (j < len2)
        {
            res[k++] = vec2[j++];
        }
        return (len1 + len2) % 2 == 0 ? (float)(res[len / 2] + res[len / 2 - 1]) / 2 : res[len / 2];
        }