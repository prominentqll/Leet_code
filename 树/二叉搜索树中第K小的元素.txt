题目描述：
***********************************************************************************
给定一个二叉搜索树，编写一个函数 kthSmallest 来查找其中第 k 个最小的元素。

说明：
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

示例 1:

输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1
示例 2:

输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3

解题思路：
中序遍历的第k个节点就是第K小的元素
************************************************************************************

代码实现：
递归：
TreeNode * smallK(TreeNode *node,int k,int & i)
    {
       if(node==nullptr)
       {
           return nullptr;
       }
       TreeNode *p1= smallK(node->left,k,i);
       if(p1!=nullptr)
       {
           return p1;
       }
        i++;
        if(i==k)
        {
            return node ;
        }
      return  smallK(node->right,k,i);
    }
	
	
非递归：
int kthSmallest(TreeNode* root, int k) {
        int cnt = 0;
        stack<TreeNode*> s;
        TreeNode *p = root;
        while (p || !s.empty()) {
            while (p) {
                s.push(p);
                p = p->left;
            }
            p = s.top(); s.pop();
            ++cnt;
            if (cnt == k) return p->val;
            p = p->right;
        }
        return 0;
    }