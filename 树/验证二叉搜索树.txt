***********************************************************************************************************
题目描述：
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。

解题思路：
用递归的中序遍历
每当遍历到一个新节点时和其上一个节点比较，如果不大于上一个节点那么则返回false，全部遍历完成后返回true。
***********************************************************************************************************
代码实现：

bool isValidBST(TreeNode* node,long min,long max)
    {
        if(node==nullptr)
        {
            return true;
        }
        if(node->val<=min||node->val>=max)//小于下确界或者大于上确界都是不正确的
        {
            return false;
        }
		//对于左孩子来说，上确界就是根节点的值
		//对于右孩子来说，下确界就是根节点的值
        return  isValidBST(node->left,min,node->val)&&isValidBST(node->right,node->val,max);
        
    }
    bool isValidBST(TreeNode* root) 
    {
        //LONG_MIN表示下确界，LONG_MAX表示上确界
        return isValidBST(root,LONG_MIN,LONG_MAX);
    }