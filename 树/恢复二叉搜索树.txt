*********************************************************
题目描述：
二叉搜索树中的两个节点被错误地交换。

请在不改变其结构的情况下，恢复这棵树。

示例 1:

输入: [1,3,null,null,2]

   1
  /
 3
  \
   2

输出: [3,1,null,null,2]

   3
  /
 1
  \
   2
示例 2:

输入: [3,1,4,null,null,2]

  3
 / \
1   4
   /
  2

输出: [2,1,4,null,null,3]

  2
 / \
1   4
   /
  3
 
解题思路：
1.使用两个容器，其中一个用来存储结点的地址，一个用来存储结点的值
2.对用来存储结点的值的容器进行排序
3.排序完之后，将对应的值填写进对应的地址
******************************************************************************

代码实现：
void inorder(TreeNode *root, vector<TreeNode *> &str, vector<int> & vec)
{
	if (root == nullptr)
	{
		return;
	}
	inorder(root->left,str,vec);
	str.push_back(root);
	vec.push_back(root->val);
	inorder(root->right, str, vec);
	sort(vec.begin(), vec.end());
	for (int i = 0; i < str.size(); ++i)
	{
		str[i]->val = vec[i];
	}
}

void recoverTree(TreeNode* root)
{
	if (root == nullptr)
	{
		return;
	}
	vector<TreeNode *> str;//存放每个结点的值
	vector<int> vec;//存放对应地址的值
	inorder(root, str, vec);
}
