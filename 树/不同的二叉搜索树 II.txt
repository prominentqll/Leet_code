题目要求：
给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 
 
 
解题思路：

class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if(n == 0)
        {
            vector<TreeNode *> res;
            //res.push_back(NULL);
            return res;
        }
        return getRoot(1,n);
    }
    vector<TreeNode*> getRoot(int l, int r){
        vector<TreeNode*> res;
        if(l > r)
            {
                res.push_back(NULL);
                return res;
            }
        for(int i=l;i<=r;++i)
        {
            vector<TreeNode*> le = getRoot(l,i-1); //递归获取左子树
            vector<TreeNode*> rig = getRoot(i+1,r); //递归获取右子树
            for(int j=0;j<le.size();++j)
            {
                for(int k=0;k<rig.size();++k)
                {
                    TreeNode* root= new TreeNode(i); //以i为根节点的生成的搜索二叉树
                    root->left = le[j];
                    root->right = rig[k];
                    res.push_back(root);
                }
            }
        }
        return res;
    }
};