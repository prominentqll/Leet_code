**************************************************************************************************************
题目描述：
给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。

说明: 叶子节点是指没有子节点的节点。

示例: 
给定如下二叉树，以及目标和 sum = 22，

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5->4->11->2。

解题思路：
最直接的方法就是利用递归，遍历整棵树
如果当前节点不是叶子，对它的所有孩子节点，递归调用 hasPathSum 函数，其中 sum 值减去当前节点的权值
如果当前节点是叶子，检查 sum 值是否等于当前节点，也就是是否找到了给定的目标和。
*****************************************************************************************************************
代码实现：
bool hasPathSum(TreeNode* root, int sum) {
        if(root==nullptr)
        {
            return false;
        }
        if(root->left==nullptr&&root->right==nullptr)
        {
            return sum==root->val;
        }
        return hasPathSum(root->left,sum-root->val)||
               hasPathSum(root->right,sum-root->val);
    }