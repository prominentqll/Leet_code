*************************************************************
题目描述：
给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明: 叶子节点是指没有子节点的节点。

示例:

给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.

注意：
此题的关键在于递归结束条件
划重点，很多人写出的代码都不符合[1,2]这个测试用例，是因为没搞清楚题意

题目中说明:叶子节点是指没有子节点的节点
这句话的意思是 1 不是叶子节点

递归结束条件：
叶子节点的定义是左孩子和右孩子都为NULL时叫做叶子节点
当root节点左右孩子都为空时，返回1
当root节点左右孩子有一个为空时，返回不为空的孩子节点的深度
当root节点左右孩子都不为空时，返回左右孩子较小深度的节点值

*************************************************************
代码实现：
int minDepth(TreeNode* root) {
        if(root==nullptr)
        {
            return 0;
        }
      
        int left=minDepth(root->left);
        int right=minDepth(root->right);
        if(root->left==nullptr&&root->right!=nullptr)
        {
            return right+1;
        }
        if(root->left!=nullptr&&root->right==nullptr)
        {
            return left+1;
        }
        return left<=right?left+1:right+1;
        
    }
};

