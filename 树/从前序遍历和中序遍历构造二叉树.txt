题目描述：
根据一棵树的前序遍历与中序遍历构造二叉树。

注意:
你可以假设树中没有重复的元素。

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]
返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

解题思路：
根据前序遍历的结果确定根节点
根据中序遍历的结果确定跟根节点的左子树和右子树

代码实现：
    TreeNode *buildTree(vector<int> &preorder,vector<int> &inorder,int start1,int end1,int start2,int end2)
    {
        if(start1>end1||start2>end2)
        {
            return nullptr;
        }
        TreeNode *root=new TreeNode(preorder[start1]);
        for(int i=start2;i<=end2;++i)
        {
            if(inorder[i]==preorder[start1])
            {
                root->left=buildTree(preorder,inorder,start1+1,
                                     start1+i-start2,start2,i-1);
                
                root->right=buildTree(preorder,inorder,
                                      start1+i-start2+1,end1,i+1,end2);
            }
        }
        return root;
        
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int len1=preorder.size();
        int len2=inorder.size();
        if(len1==0)
        {
            return nullptr;
        }
       return buildTree(preorder,inorder,0,len1-1,0,len2-1);
        
        
    }