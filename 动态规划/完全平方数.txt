
/*
解题思路：
1.dp[n] 表示以n为和的最少平方的和的个数（所求）。

2.dp 数组所有下标已经为完全平方数的数（如1,4,9...）置为 1。

3.动态方程的意思是：对于每个 i ，比 i 小一个完全平方数的那些数中最小的个数+1就是所求，也就是 dp [ i - j * j ] + 1 

*/





int numSquares(int n) 
{
	vector<int> dp(n + 1, INT_MAX);
	for (int i = 1; i*i <= n; ++i)
	{
		if (i*i <= n)
		{
			dp[i*i] = 1;//每个完全平方数自身必然是由自身一个数组成
		}
	}

	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j*j <i ; ++j)
		{
			dp[i] = min(dp[i], dp[i - j * j] + 1);
			if (dp[i] == 1)
			{
				break;
			}
		}
	}
	return dp[n];
}


