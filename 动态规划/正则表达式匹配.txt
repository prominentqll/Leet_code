***********************************************************************************************************************
题目描述：
给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false


解题思路：
- 每次从p中拿出一个字符来与s中的字符进行匹配
- 如果该字符后续的字符不是那么直接与s中对应字符进行匹配判断即可，如果匹配上了，那么就将两个游标都往后移动一位。
- 如果匹配过程中遇到不相等的情况，则直接返回false。
- 如果后续字符是*，那么就如上面所分析的，分成两种情况
- 一种是匹配0个，那么只需要跳过p中的这两个字符，继续与s中的字符进行比较即可
- 如果是匹配多个，那么将s中的游标往后移动一个，继续进行判断。这两个条件只要其中一个能满足即可。
*****************************************************************************************************************************
代码实现：
bool match(char *s,char *p)
{
    if(*s=='\0'&&*p=='\0')
    {
        return true;
    }
    if(*s!='\0'&&*p=='\0')
    {
        return false;
    }
    
    if(*(p+1)=='*')
    {
        //分三种情况
        //1.第一个字符匹配
        if(*p==*s||*p=='.'&&*s!='\0')
        {
            return match(s+1,p)||match(s,p+2);
        }
        else
        {
            return match(s,p+2);
        }
    }
    else
    {
        if(*s==*p||*p=='.'&&*s!='\0')
        {
            return match(s+1,p+1);
        }
        else
        {
            return false;
        }
    }
}

bool isMatch(char * s, char * p){
    if(s==NULL||p==NULL)
    {
        return false;
    }
    return match(s,p);

}




