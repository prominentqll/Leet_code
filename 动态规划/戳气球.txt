*********************************************************************************************************************
题目描述：
有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。
现在要求你戳破所有的气球。
每当你戳破一个气球 i 时，你可以获得 nums[left] * nums[i] * nums[right] 个硬币。 
这里的 left 和 right 代表和 i 相邻的两个气球的序号。
注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。

求所能获得硬币的最大数量。

说明:

你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。
0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100
示例:

输入: [3,1,5,8]
输出: 167 
解释: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []
     coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167
解题思路：
思路：动态规划

状态：dp[i][j] 表示戳破[i,j]范围内这些气球所能获得的最大数量的硬币

转移方程： dp[i][j] = max(dp[i][j],dp[i][k-1] + dp[k+1][j] + arr[i-1]*arr[k]*arr[j+1]); (i<=k<=j) 

方程含义： 选择i到j之间的某一个气球k，然后先戳破 i到k-1之间的气球，再戳破k+1到 j 之间的气球，最后戳破k这个气球。

(先戳破[k+1,j]之间的气球，再戳破[i,k-1]之间的气球，最后戳破k。 跟上面情况的计算结果也一样。)

我们将 k 从i遍历到j，于是覆盖了所有的情况。

因为题目说arr[0] 和 arr[n+1] 都设置为1，所以假如题目给定的气球数目是n，那我们的结果就是dp[1][n]
*******************************************************************************************************************
代码实现：
int maxCoins(vector<int>& nums) 
    {
        int len=nums.size();
        vector<int> vec(len+2);
        vec[0]=1;
        vec[len+1]=1;
        for(int i=0;i<len;++i)
        {
            vec[i+1]=nums[i];
        }
        vector<vector<int>> dp(len+2,vector<int>(len+2,0));
        
        for(int span=1;span<=len;++span)
        {
            for(int i=1;i<=len-span+1;++i)
            {
                int j=i+span-1;
                for(int k=i;k<=j;++k)
                {
                    dp[i][j]=max(dp[i][j],dp[i][k-1]+dp[k+1][j]+vec[i-1]*vec[k]*vec[j+1]);   
                }
                
            }
            
            
        }
        return dp[1][len];
                
    }

