***********************************************************************************
题目描述：
给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

解题思路：
动态规划解决：
1.dp[i][j]:表示走到当前位置的最小的路径和
2.当i==0时，dp[i][j]=dp[i-1][j]+triangle[i][j]
  当j==0时，dp[i][j]=dp[i-1][j-1]+triangle[i][j]
3.其余结点 有两条路径可走，取最小
  dp[i][j]=min(dp[i-1][j-1]+triangle[i][j],dp[i-1][j]+triangle[i][j])

*************************************************************************************

代码实现：

int minimumTotal(vector<vector<int>>& triangle) 
{
	int len= triangle.size();

	vector<vector<int>> dp = triangle;
	for (int i = 1; i < len; ++i)
	{
		for (int j = 0; j <=i; ++j)
		{
			if (j == 0)
			{
				dp[i][j] = dp[i - 1][j] + triangle[i][j];
			}
			else if (j == i)
			{
				dp[i][j] = dp[i - 1][j - 1] + triangle[i][j];
			}
			else
			{
				dp[i][j] = min(dp[i - 1][j - 1] + triangle[i][j], dp[i - 1][j] + triangle[i][j]);
			}
		}
	}
	return *min_element(dp[len - 1].begin(), dp[len - 1].end());
}




优化：O(n)

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int m = triangle.size();
        vector<int> res(m+1, 0);
       
        for(int i = m-1; i >= 0; --i)
            for(int j = 0; j < triangle[i].size(); ++j)
                res[j] = min(res[j]+triangle[i][j], res[j+1]+triangle[i][j]);
        return res[0];
    }
};