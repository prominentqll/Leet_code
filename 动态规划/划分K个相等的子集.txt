**********************************************************************************************************
题目描述：
给定一个整数数组  nums 和一个正整数 k，找出是否有可能把这个数组分成 k 个非空子集，其总和都相等。

示例 1：

输入： nums = [4, 3, 2, 3, 5, 2, 1], k = 4
输出： True
说明： 有可能将其分成 4 个子集（5），（1,4），（2,3），（2,3）等于总和。
 

注意:

1 <= k <= len(nums) <= 16
0 < nums[i] < 10000

解题思路：
1.先求出平均数avg，假如平均数avg不为整数，也就是说数组的数字总和不能平均的分为k份，那么直接返回false。
2.创建一个布尔数组flag，来记录nums数组中数字的状态（已用还是未用）
3.temp 初始为avg ，temp的作用为记录当前子集的数字总和，当temp等于0时，当前这个子集也就可以确定。
4.index是用来记录遍历数组时从哪个位置开始遍历，以防将前面的数字重新计算。
5.当k个子集全部求解完，返回true，如果一直求解不出，则返回false。
6.当temp = 0 的时候，也就是新一个子集求解完，那么继续求解下一个子集，k-1，temp重新置为avg；
7.当temp ！= 0 时，就是子集还未求解完，那么继续求解子集，继续从数组中取数字，递归求解。
**********************************************************************************************************

代码实现一(java)：
class Solution {
    public boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = 0;
        int len = nums.length;
        for (int i = 0; i < len; i++) 
            sum += nums[i];

        if(sum % k != 0 ) return false;
        int avg = sum / k;
        boolean[] flag = new boolean[len];
        return help(nums,flag,avg,k,avg,0);
    }

    public static boolean help(int[] nums, boolean[] flag, int avg, int k, int temp, int index ){

        if (k == 0 ) return true;

        if (temp == 0)
            return help(nums,flag,avg,k-1,avg,0);

        for (int i = index; i < nums.length; i++) {
            if (flag[i] == true) continue;

            flag[i] = true;
            if(temp-nums[i]>=0 && help(nums,flag,avg,k,temp-nums[i],index+1)){
                return true;
            }
            flag[i] = false;

        }

        return false;
    }
}






代码实现二(c++):
class Solution {
public:
    int perSum = 0;//每个子集的和
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        int maxEle = INT_MIN, sum = 0;
        unordered_map<int, int> hashMap;
        //统计各个元素的出现的次数
        for (auto num : nums){
            hashMap[num] += 1;
            sum += num;//所有元素求和
            maxEle = max(maxEle, num);//寻找最大值
        }
        if (sum % k != 0){//不能平均分配
            return false;
        }
        perSum = sum / k;
        if (perSum < maxEle){//最大值超过了每个子集的和
            return false;
        }
        return dfs(hashMap, k, 0);//搜索k个perSum
    }
    //搜索nowK个preSum，target是上一个子集剩余的需要寻找的元素
    bool dfs(unordered_map<int, int> &hashMap, int nowK, int target){
        if (target == 0){
            if (nowK == 0){
                return true;
            }
            else{
                return dfs(hashMap, nowK - 1, perSum);//当前子集搜索完毕，搜索下一个子集
            }
        }
        else{
            //搜索target
            for (int num = target; num > 0; --num){
                if (hashMap.count(num) && hashMap[num] > 0){//num还有使用次数
                    hashMap[num] -= 1;//次数自减
                    if (dfs(hashMap, nowK, target - num)){//继续搜索target - num
                        return true;
                    }
                    hashMap[num] += 1;
                }
            }
            return false;
        }
    }
};
