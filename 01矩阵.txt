**********************************************************************************************************
题目描述：
给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。

两个相邻元素间的距离为 1 。

示例 1: 
输入:

0 0 0
0 1 0
0 0 0
输出:

0 0 0
0 1 0
0 0 0
示例 2: 
输入:

0 0 0
0 1 0
1 1 1
输出:

0 0 0
0 1 0
1 2 1
注意:

给定矩阵的元素个数不超过 10000。
给定矩阵中至少有一个元素是 0。
矩阵中的元素只在四个方向上相邻: 上、下、左、右。

解题思路：
1.根据题意，首先所有为0的元素的距离为0
2.用一个队列记录每个0元素的位置
3.每次取队头元素并判断该队头元素的四个方向是否存在元素1
4.如果存在，则1这个元素的距离就要+1，并将该元素置为0(表示该元素被处理了)，并将该元素列入可达队列中
5.四个方向全部判断完成之后就删除该队头元素，继续取下一个队头元素处理。
*******************************************************************************************************************

代码实现：
vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) 
{
	int row = matrix.size();//数组的行
	if (row == 0)
	{
		return {};
	}
	int col = matrix[0].size();//数组的列
	vector<vector<int>>  res(row, vector<int>(col));//用来保存结果的矩阵
	queue<pair<int, int>>  que;
	
	//开始遍历matrix
	for (int i = 0; i < row; ++i)
	{
		for (int j = 0; j < col; ++j)
		{
			if (matrix[i][j] == 0)
			{
				res[i][j] = 0;
				que.push(make_pair(i, j));
			}
			else
			{
				res[i][j] = INT_MAX;
			}
		}
	}
	//定义四个方向
	vector<pair<int, int>>  dir = vector<pair<int, int>>({ make_pair(-1,0),make_pair(1,0),make_pair(0,-1),make_pair(0,1) });
	while (!que.empty())
	{
		pair<int, int> cur = que.front();
		for (int i = 0; i < 4; ++i)
		{
			int x = dir[i].first;//当前值为0的点的横坐标
			int y = dir[i].second;//当前值为0的点的纵坐标
			int xx = cur.first;//当前方向的横坐标
			int yy = cur.second;//当前方向的纵坐标
			if (xx + x < 0 || xx + x >row - 1 || yy + y < 0 || yy + y > col - 1)
			{
				continue;
			}
			if (matrix[x + xx][y + yy] == 1)//表示没有被处理过
			{
				matrix[x + xx][y + yy] = 0;//该点一旦被处理就可以升级为一个可达区域
				res[x + xx][y + yy] = res[xx][yy] + 1;//计算该点的距离
				que.push(make_pair(x + xx, y + yy));// 把该处理完成的点作为一个可达点添加进队列
			}
		}
		que.pop();//清除一个可达点
	}
	return res;
}


