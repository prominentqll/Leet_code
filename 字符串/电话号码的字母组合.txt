****************************************************************************************
题目描述:
给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。

示例:
输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

解题思路：
首先需要建立一个字典用来存储对应的字符串
根据输入的数字字符串中的每个数字字符找到对应字典序中的字母字符串
通过递归，不断取字母字符串中的字母进行组合
*******************************************************************************************
代码实现：

   static void fun(string digits, string nums[],string str, vector<string> &result, int n)
{
	if (n == digits.length())
	{
		result.push_back(str);
	}
	else
	{
		string s = nums[digits[n] - '2'];
		int length = s.size();
		for (int i = 0; i < length; ++i)
		{
			str += s[i];
			fun(digits, nums, str, result, n + 1);
			str.pop_back();
		}
	}
}

vector<string> letterCombinations(string digits) 
{
	//首先需要建立一个字典用来存储对应的字符串
	string nums[8] = { "abc", "def", "ghi", "jkl","mno","pqrs","tuv","wxyz" };
    int size=digits.length();
    if(size==0)
    {
        return {};
    }
	vector<string> res;
	string str;
	fun(digits, nums, str, res, 0);
	return res;
}