******************************************************************************************
题目描述：
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

解题思路：
1.遇到([{，进行入栈操作
2.遇到)]}，与栈定元素进行比较，如果匹配，就将栈顶元素进行出栈
3.若无法与栈顶元素进行匹配，则代表匹配失败
***************************************************************************************
代码实现：
    bool isValid(string s) 
{
	int size = s.size();
	if (size == 0)
	{
		return true;
	}
	/*
	解决思路：
	1.遇到([{，进行入栈操作
	2.遇到)]}，与栈定元素进行比较，如果匹配，就将栈顶元素进行出栈
	3.若无法与栈顶元素进行匹配，则代表匹配失败
	*/
	stack<char>  stack;
	for (int i = 0; i < size; ++i)
	{
		if (!stack.empty())
		{
			if (s[i] == '(')
			{
				stack.push(s[i]);
			}
			else if (s[i] == ')')
			{
				if (stack.top() == '(')
				{
					stack.pop();
				}
				else
				{
					return false;
				}
			}
			else if (s[i] == '[')
			{
				stack.push(s[i]);
			}
			else if (s[i] == ']')
			{
				if (stack.top() == '[')
				{
					stack.pop();
				}
				else
				{
					return false;
				}
			}
			else if (s[i] == '{')
			{
				stack.push(s[i]);
			}
			else if (s[i] == '}')
			{
				if (stack.top() == '{')
				{
					stack.pop();
				}
				else
				{
					return false;
				}
			}
		}
		else
		{
			stack.push(s[i]);
		}
	}
	return stack.empty();
}