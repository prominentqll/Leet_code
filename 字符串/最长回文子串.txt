******************************************************************************
问题描述：
给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"
******************************************************************************

解法1：
string longestPalindrome(string s)
    {
        int k=0,low=0,high=0,pos,maxlens=1,l=s.size();//pos记录最长子串的起始位置
        if(l<2) return s;
        while(k<l)//k用来记录下一次开始的位置
        {
            low=high=k;
            while(high<l-1 && s[high+1]==s[high])//跳过重复字符
            {
                high++;
            }
            k = high+1;
            while(low>0 && high<l-1 && s[low-1]==s[high+1])//中心扩张
            { 
                low--;
                high++;
            }
            int lens=high-low+1;
            if(lens>maxlens)
            {
                maxlens = lens;
                pos=low;
            }
        }
        return s.substr(pos,maxlens);
    }
	
解法2：动态规划
 string longestPalindrome(string s) {
	int size = s.size();
	string x;
	vector<vector<int>> res(size, vector<int>(size));
	int start = 0;
	int len = 1;
	for (int i = 0; i < size; ++i)
	{
		res[i][i] = 1;
		if (i < size - 1)
		{
			if (s[i] == s[i + 1])
			{
				res[i][i + 1] = 1;
				start = i;
				len = 2;
			}
		}
	}
	for (int l = 3; l <= size; ++l)//l为子串的长度
	{
		for (int i = 0; i + l - 1 < size; i++)
		{
			int j = i + l - 1;
			if (s[i] == s[j] && res[i + 1][j - 1] == 1)
			{
				res[i][j] = 1;
				start = i;
				len = l;
			}
		}
	}
	
	
	return s.substr(start, len);
}

解法3：
string longestPalindrome(string s) {
        int len=s.size();
        if(len==0)
        {
            return "";
        }
        int maxlength=1;
        int start=0;
        // 需要两种情况
        //奇数位回文串（aba）,以i为中心向两边扩展
        for(int i=0;i<len;++i)
        {
            int j=i-1;
            int k=i+1;
            while(j>=0&&k<len&&s[j]==s[k])
            {
                if(k-j+1>maxlength)
                {
                    maxlength=k-j+1;
                    start=j;
                }
                
                j--;
                k++;
            }
        }
        //偶数位回文串(cbbd)以i，i+1为中心向两边扩展
        for(int i=0;i<len;++i)
        {
            int j=i;
            int k=i+1;
            while(j>=0&&k<len&&s[j]==s[k])
            {
                if(k-j+1>maxlength)
                {
                    maxlength=k-j+1;
                    start=j;
                }
                
                j--;
                k++;
            }
        }
        if(maxlength>0)
        {
            return s.substr(start,maxlength);
        }
        return "";
    }