********************************************************************************************
题目描述：
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。

示例:
输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6

解题思路：
1.首先找最高的柱子，记录其下标
2.找到最高的柱子后，将数组划分两部分
3.分别从最左边和最右边向最高的柱子靠拢
4.对于左边来说，如果右边的柱子比左边的柱子低，就可以接雨水
	否则就更新左边的高度
5.对于右边来说，如果右边的柱子比左边的柱子高，就可以接雨水
	 否则就更新右边柱子的高度
	 
********************************************************************************************

代码实现：
int trap(vector<int>& height) 
{
	//首先找最高的柱子，记录其下标和值
    if(height.size()==0)
    {
        return 0;
    }
	int maxval = 0;
	int maxindex = 0;
	for (int i = 0; i < height.size(); ++i)
	{
		if (height[i] > maxval)
		{
			maxval = height[i];
			maxindex = i;
		}
	}
	/*
	找到最高的柱子后，将数组划分两部分
	分别从最左边和最右边向最高的柱子靠拢
	1.对于左边来说，如果右边的柱子比左边的柱子低，就可以接雨水
	  否则就更新左边的高度
	2.对于右边来说，如果右边的柱子比左边的柱子高，就可以接雨水
	  否则就更新右边柱子的高度
	*/
	int leftheight = height[0];
	int rightheight = height[height.size()-1];
	int area = 0;// 表示接的雨水的大小
	for (int i = 0; i < maxindex; ++i)
	{
		if (leftheight < height[i])
		{
			leftheight = height[i];
		}
		else
		{
			area += leftheight - height[i];
		}
	}

	for (int i = height.size() - 1; i >maxindex; --i)
	{
		if (rightheight < height[i])
		{
			rightheight = height[i];
		}
		else
		{
			area += rightheight - height[i];
		}
	}
	return area;
}

