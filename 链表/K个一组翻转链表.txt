*************************************************************************************************************************
题目描述：
给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。

k 是一个正整数，它的值小于或等于链表的长度。

如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。

示例 :

给定这个链表：1->2->3->4->5

当 k = 2 时，应当返回: 2->1->4->3->5

当 k = 3 时，应当返回: 3->2->1->4->5

解题思路：
- 链表分为已翻转部分+待翻转部分+未翻转部分
- 每次翻转前，要确定翻转链表的范围，这个必须通过 k次循环来确定
- 需记录翻转链表前驱和后继，方便翻转完成后把已翻转部分和未翻转部分连接起来
- 初始需要两个变量 pre 和 end，pre 代表待翻转链表的前驱，end 代表待翻转链表的末尾
- 经过k此循环，end 到达末尾，记录待翻转链表的后继 next = end->next
- 翻转链表，然后将三部分链表连接起来，然后重置 pre 和 end指针，然后进入下一次循环
- 特殊情况，当翻转部分长度不足 k 时，在定位 end 完成后，end==nullptr，已经到达末尾，说明题目已完成，直接返回即可
************************************************************************************************************************
代码实现：
class Solution {
public:
    ListNode *reverse(ListNode *head)//翻转链表
    {
        ListNode *pre=nullptr;
        ListNode *cur=head;
        while(cur!=nullptr)
        {
            ListNode *next=cur->next;
            cur->next=pre;
            pre=cur;
            cur=next;
        }
        return pre;
        
    }
    
    ListNode* reverseKGroup(ListNode* head, int k) {
       ListNode *dummy=new ListNode (-1);
        dummy->next=head;
        
        ListNode *pre=dummy;//pre代表待翻转链表的前驱
        ListNode *end=pre;  //end代表待翻转链表的末尾
        
        while(end->next!=nullptr)
        {
          for(int i=0;i<k&&end!=nullptr;i++)
          {
              end=end->next;
          }
          if(end==nullptr)//表示链表已全部处理完
          {
              break;
          }
          ListNode *next=end->next;//记录待翻转链表的后继
          ListNode *start=pre->next;//start表示待翻转链表的开始
          end->next=nullptr;//将要翻转的部分与未翻转的部分断开
          pre->next=reverse(start);//连接前边
          start->next=next;//连接后边
          pre=start;//链表已翻转完部分的最后一个部分
          end=pre;   
        }
        return dummy->next;
    }
};
