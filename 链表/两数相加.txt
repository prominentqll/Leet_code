****************************************************************************************************************************
题目描述：
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储一位数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

解题思路：
我们使用变量来跟踪进位，并从包含最低有效位的表头开始模拟逐位相加的过程。
***************************************************************************************************************************
代码实现：
ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *newlist=nullptr;//保存新链表的头
        ListNode *node=nullptr;
        int sum=0;
        int tmp=0;//代表进位
        while(l1!=nullptr||l2!=nullptr||tmp!=0)
        {
            sum=(l1==nullptr?0:l1->val)+(l2==nullptr?0:l2->val)+tmp;//每次两个链表对应位置的节点值进行相加后还要加上次的进位
            tmp=sum/10;// 进位
            if(newlist==nullptr)
            {
               node=new ListNode(sum%10);//代表值
               newlist=node;
            }
            else
            {
                node->next=new ListNode(sum%10);
                node=node->next;
            }
          l1=l1==nullptr?nullptr:l1->next;
          l2=l2==nullptr?nullptr:l2->next;  
        }
        return newlist;    
    }