**************************************************************************************
题目描述：
给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL
解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL
解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

解题思路：
- 首先计算链表的长度，以便计算真正的移动次数m
- 快指针先走m步
- 快慢指针一起走，当快指针走到最后一个结点的时候，慢指针指向旋转后的最后一个结点
- 慢指针的下一个结点是旋转后的头结点
- 慢指针是最后一个结点
*************************************************************************************
代码实现：
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==nullptr||head->next==nullptr)
        {
            return head;
        }
        //首先计算链表的长度，以便计算真正的移动次数
        ListNode *node =head;
        int length=0;
        while(node!=nullptr)
        {
            length++;
            node=node->next;
        }
        int m=k%length;//m为真正的移动次数
        ListNode *fast=head;
        ListNode *last=head;
        while(m--)//快指针先走m步
        {
            fast=fast->next;
        }
        while(fast->next!=nullptr)//快慢指针一起走
        {
            fast=fast->next;
            last=last->next;
        }
        fast->next=head;// 当快指针走到最后一个结点的时候，慢指针指向旋转后的最后一个结点
        ListNode *res=last->next;//慢指针的下一个结点是旋转后的头结点
        last->next=nullptr;//慢指针是最后一个结点
        return res;
    }
};